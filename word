import pandas as pd
import dash
from dash import dcc, html, Input, Output
import plotly.express as px

# Load your summary dataframe
# summary = pd.read_excel("Tagged_Exception_System_Stats.xlsx")  # or use existing variable

# Simulated summary if not loaded
# Replace this with your actual `summary` variable if already available
# summary = pd.read_csv("...")

# Sample placeholder - replace with your processed summary
# summary = ...

# Initialize the Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div([
    html.H2("Exception-System Quadrant View (Average vs CV)"),
    
    html.Div([
        html.Label("Filter by System:"),
        dcc.Dropdown(
            options=[{"label": s, "value": s} for s in summary["System"].unique()],
            id='system_filter',
            value=None,
            multi=True,
            placeholder="Select Systems..."
        ),
    ], style={'width': '30%', 'display': 'inline-block'}),

    html.Div([
        html.Label("Filter by Exception:"),
        dcc.Dropdown(
            options=[{"label": e, "value": e} for e in summary["Exceptions"].unique()],
            id='exception_filter',
            value=None,
            multi=True,
            placeholder="Select Exceptions..."
        ),
    ], style={'width': '60%', 'display': 'inline-block'}),

    dcc.Graph(id='quadrant_chart'),

    html.Div(id='click_output', style={'marginTop': 20})
])

# Callback to update graph based on filters
@app.callback(
    Output('quadrant_chart', 'figure'),
    [Input('system_filter', 'value'),
     Input('exception_filter', 'value')]
)
def update_graph(selected_systems, selected_exceptions):
    filtered = summary.copy()

    if selected_systems:
        filtered = filtered[filtered['System'].isin(selected_systems)]
    if selected_exceptions:
        filtered = filtered[filtered['Exceptions'].isin(selected_exceptions)]

    fig = px.scatter(
        filtered,
        x='Average',
        y='CV (%)',
        color='System',
        hover_data=['Exceptions'],
        title="Quadrant: Average vs CV (%)",
        symbol='Average_Tag',
        facet_col='CV_Tag',
        facet_row='Average_Tag',
        height=700
    )

    fig.update_layout(
        showlegend=True,
        margin=dict(t=60, l=40, r=40, b=40),
        plot_bgcolor='rgba(240,240,240,0.95)'
    )

    return fig

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)

