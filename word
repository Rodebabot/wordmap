import win32com.client
import pandas as pd
from datetime import datetime
from textblob import TextBlob

# === USER INPUT ===
start_date = datetime(2024, 8, 1)
end_date = datetime(2024, 8, 8)

# === Connect to Outlook ===
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder(6)  # 6 = Inbox
account_name = inbox.Parent.Name
print(f"📬 Connected to mailbox: {account_name}")

# === Function to read emails from a folder and its subfolders ===
def read_emails(folder):
    emails = []
    items = folder.Items
    items.Sort("[ReceivedTime]", True)

    for item in items:
        try:
            if item.Class != 43:  # MailItem
                continue

            # Remove timezone info for safe comparison
            received_time = item.ReceivedTime.replace(tzinfo=None)

            if not (start_date <= received_time <= end_date):
                continue

            sender = item.SenderName
            to = item.To
            cc = item.CC
            subject = item.Subject or ""
            body = item.Body or ""
            preview = body[:100].replace("\n", " ").replace("\r", " ")

            sentiment_score = TextBlob(body).sentiment.polarity
            sentiment = "Positive" if sentiment_score > 0 else "Negative" if sentiment_score < 0 else "Neutral"

            emails.append({
                "Folder": folder.Name,
                "Sender": sender,
                "To": to,
                "CC": cc,
                "Received Time": received_time.strftime("%Y-%m-%d %H:%M:%S"),
                "Subject": subject,
                "Sentiment": sentiment,
                "Sentiment Score": round(sentiment_score, 3),
                "Preview": preview
            })

        except Exception as e:
            print(f"⚠️ Skipped an email due to error: {e}")
            continue

    # Recurse into subfolders
    for subfolder in folder.Folders:
        emails += read_emails(subfolder)

    return emails

# === Run ===
print("🔍 Reading emails...")
emails_data = read_emails(inbox)

# === Export to Excel ===
if not emails_data:
    print("❌ No emails found in the given date range.")
else:
    df = pd.DataFrame(emails_data)
    output_file = f"Outlook_Emails_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"
    df.to_excel(output_file, index=False)
    print(f"✅ {len(df)} emails saved to '{output_file}'")
