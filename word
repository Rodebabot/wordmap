import win32com.client
import pandas as pd
from datetime import datetime
from textblob import TextBlob

# === USER INPUT ===
start_date = datetime(2024, 8, 1)
end_date = datetime(2024, 8, 8)

# === CONNECT TO OUTLOOK ===
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder(6)  # 6 = Inbox
account_name = inbox.Parent.Name
print(f"\nüì¨ Connected to mailbox: {account_name}")
print("üîç Walking through folders...\n")

# === GLOBAL list to collect all emails ===
all_emails = []

# === FUNCTION TO PRINT AND RECURSE FOLDERS ===
def walk_and_read(folder, indent=0):
    global all_emails
    prefix = "  " * indent
    print(f"{prefix}üìÅ {folder.Name}")
    
    try:
        items = folder.Items
        items.Sort("[ReceivedTime]", True)
        
        for item in items:
            try:
                if item.Class != 43:  # Only MailItem
                    continue

                received = item.ReceivedTime
                # Normalize timezone difference
                received = received.replace(tzinfo=None)

                if not (start_date <= received <= end_date):
                    continue

                sender = item.SenderName
                to = item.To
                cc = item.CC
                subject = item.Subject or ""
                body = item.Body or ""
                preview = body[:100].replace("\n", " ").replace("\r", " ")

                sentiment_score = TextBlob(body).sentiment.polarity
                sentiment = "Positive" if sentiment_score > 0 else "Negative" if sentiment_score < 0 else "Neutral"

                all_emails.append({
                    "Folder": folder.Name,
                    "Sender": sender,
                    "To": to,
                    "CC": cc,
                    "Received Time": received.strftime("%Y-%m-%d %H:%M:%S"),
                    "Subject": subject,
                    "Sentiment": sentiment,
                    "Sentiment Score": round(sentiment_score, 3),
                    "Preview": preview
                })
            except Exception as inner_e:
                print(f"{prefix}‚ö†Ô∏è Skipping one email: {inner_e}")
    except Exception as folder_e:
        print(f"{prefix}‚ùå Cannot access items in folder '{folder.Name}': {folder_e}")

    # Recurse into subfolders
    for subfolder in folder.Folders:
        walk_and_read(subfolder, indent + 1)

# === START READING ===
walk_and_read(inbox)

# === EXPORT TO EXCEL ===
if not all_emails:
    print("\n‚ùå No emails found in the given date range.")
else:
    df = pd.DataFrame(all_emails)
    output_file = f"Outlook_Emails_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"
    df.to_excel(output_file, index=False)
    print(f"\n‚úÖ {len(df)} emails saved to: {output_file}")
